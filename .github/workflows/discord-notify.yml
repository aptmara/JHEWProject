---
name: "Notify Discord (push & PR detail)"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
    types:
      - "opened"
      - "closed"
      - "synchronize"
      - "reopened"
      - "ready_for_review"

jobs:
  notify:
    runs-on: "ubuntu-latest"
    env:
      DISCORD_WEBHOOK: "${{ secrets.DISCORD_WEBHOOK }}"
      REPO: "${{ github.repository }}"
      ACTOR: "${{ github.actor }}"
      GITHUB_EVENT_NAME: "${{ github.event_name }}"
      GITHUB_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    steps:
      - name: "Prepare payload for PUSH"
        if: ${{ github.event_name == 'push' && env.DISCORD_WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail

          REF="${{ github.ref }}"
          REF_NAME="${REF##refs/heads/}"
          COMPARE_URL="${{ github.event.compare }}"
          PUSHER_NAME="${{ github.event.pusher.name }}"

          COMMITS_JSON=$(jq -r '
            .commits[:10] | map(
              "- `\(.id[0:7])` \(.message | split("\n")[0]) (by \(.author.username // .author.name // "unknown"))"
            ) | join("\n")
          ' <<< '${{ toJson(github.event) }}')
          [ -z "$COMMITS_JSON" ] && COMMITS_JSON="(no commits?)"

          esc () { python3 -c 'import json,sys; print(json.dumps(sys.argv[1])[1:-1])' "$1"; }
          trunc () { python3 - "$@" <<'PY'
          import sys
          s=sys.argv[1]
          n=int(sys.argv[2])
          # Discord Embed description: 4096 chars limit
          print(s[:n])
PY
          }

          post_json () {
            local payload="$1"
            local tmp_headers
            tmp_headers="$(mktemp)"
            # first try
            local http_code
            http_code=$(curl -sS -o /dev/null -w "%{http_code}" -D "$tmp_headers" \
              -H "Content-Type: application/json" -X POST \
              -d "$payload" \
              "$DISCORD_WEBHOOK" || true)
            # retry once on 429
            if [ "$http_code" = "429" ]; then
              local retry_after
              retry_after=$(awk -F': ' 'tolower($1)=="retry-after"{print $2}' "$tmp_headers" | tr -d '\r')
              sleep "${retry_after:-2}"
              http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                -H "Content-Type: application/json" -X POST \
                -d "$payload" \
                "$DISCORD_WEBHOOK" || true)
            fi
            if [ "${http_code:-000}" -ge 400 ]; then
              echo "::warning title=Discord webhook failed::HTTP ${http_code}"
            fi
            rm -f "$tmp_headers"
          }

          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          STATUS_EMOJI="[PUSH]"

          EMBEDS=$(cat <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% Push - %REPO% (%BRANCH%)",
              "url": "%COMPARE_URL%",
              "description": "%DESC%",
              "color": 3447003,
              "fields": [
                {"name": "Pusher", "value": "%PUSHER%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON
          )

          DESC="Latest commits to \`$REF_NAME\`:\n$COMMITS_JSON"
          DESC=$(trunc "$DESC" 4096)

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$(esc "$STATUS_EMOJI")}
          EMBEDS=${EMBEDS//%REPO%/$(esc "$REPO")}
          EMBEDS=${EMBEDS//%BRANCH%/$(esc "$REF_NAME")}
          EMBEDS=${EMBEDS//%COMPARE_URL%/$(esc "$COMPARE_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%PUSHER%/$(esc "$PUSHER_NAME")}
          EMBEDS=${EMBEDS//%RUN_URL%/$(esc "$GITHUB_RUN_URL")}
          EMBEDS=${EMBEDS//%NOW_ISO%/$(esc "$NOW_ISO")}

          post_json "{\"embeds\": $EMBEDS}"

      - name: "Prepare payload for PR"
        if: ${{ github.event_name == 'pull_request' && env.DISCORD_WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail

          ACTION="${{ github.event.action }}"
          PR_JSON='${{ toJson(github.event.pull_request) }}'

          PR_NUMBER=$(jq -r '.number' <<< "$PR_JSON")
          PR_TITLE=$(jq -r '.title' <<< "$PR_JSON")
          PR_URL=$(jq -r '.html_url' <<< "$PR_JSON")
          PR_STATE=$(jq -r '.state' <<< "$PR_JSON")
          PR_DRAFT=$(jq -r '.draft' <<< "$PR_JSON")
          MERGED=$(jq -r '.merged' <<< "$PR_JSON")
          ADDITIONS=$(jq -r '.additions' <<< "$PR_JSON")
          DELETIONS=$(jq -r '.deletions' <<< "$PR_JSON")
          CHANGED_FILES=$(jq -r '.changed_files' <<< "$PR_JSON")
          REQUESTED_REVIEWERS=$(jq -r '[.requested_reviewers[].login] | join(", ") // ""' <<< "$PR_JSON")
          LABELS=$(jq -r '[.labels[].name] | join(", ") // ""' <<< "$PR_JSON")

          esc () { python3 -c 'import json,sys; print(json.dumps(sys.argv[1])[1:-1])' "$1"; }
          trunc () { python3 - "$@" <<'PY'
          import sys
          s=sys.argv[1]
          n=int(sys.argv[2])
          print(s[:n])
PY
          }

          post_json () {
            local payload="$1"
            local tmp_headers
            tmp_headers="$(mktemp)"
            local http_code
            http_code=$(curl -sS -o /dev/null -w "%{http_code}" -D "$tmp_headers" \
              -H "Content-Type: application/json" -X POST \
              -d "$payload" \
              "$DISCORD_WEBHOOK" || true)
            if [ "$http_code" = "429" ]; then
              local retry_after
              retry_after=$(awk -F': ' 'tolower($1)=="retry-after"{print $2}' "$tmp_headers" | tr -d '\r')
              sleep "${retry_after:-2}"
              http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                -H "Content-Type: application/json" -X POST \
                -d "$payload" \
                "$DISCORD_WEBHOOK" || true)
            fi
            if [ "${http_code:-000}" -ge 400 ]; then
              echo "::warning title=Discord webhook failed::HTTP ${http_code}"
            fi
            rm -f "$tmp_headers"
          }

          COLOR=3447003
          STATUS_EMOJI="[PR]"
          case "$ACTION" in
            opened|reopened|ready_for_review) COLOR=5763719; STATUS_EMOJI="[PR OPEN]";;
            synchronize)                      COLOR=3447003; STATUS_EMOJI="[PR UPDATE]";;
            closed)
              if [ "$MERGED" = "true" ]; then
                COLOR=10181046; STATUS_EMOJI="[PR MERGED]"
              else
                COLOR=15158332; STATUS_EMOJI="[PR CLOSED]"
              fi
              ;;
          esac

          BODY_FIRST=$(jq -r '.body // ""' <<< "$PR_JSON" | { IFS= read -r l; printf "%s" "$l"; })
          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          EMBEDS=$(cat <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% PR %ACTION% - %REPO%",
              "url": "%PR_URL%",
              "description": "%DESC%",
              "color": %COLOR%,
              "fields": [
                {"name": "Changes", "value": "+%ADDITIONS% / -%DELETIONS%  (%CHANGED_FILES% files)", "inline": true},
                {"name": "State", "value": "%PR_STATE%", "inline": true},
                {"name": "Draft", "value": "%PR_DRAFT%", "inline": true},
                {"name": "Merged", "value": "%MERGED%", "inline": true},
                {"name": "Actor", "value": "%ACTOR%", "inline": true},
                {"name": "Reviewers", "value": "%REQUESTED_REVIEWERS%", "inline": true},
                {"name": "Labels", "value": "%LABELS%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON
          )

          DESC="[#${PR_NUMBER}] $(printf "%s" "$PR_TITLE")"
          if [ -n "$BODY_FIRST" ]; then
            DESC="$DESC"$'\n'"'> '"$BODY_FIRST"
          fi
          DESC=$(trunc "$DESC" 4096)

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$(esc "$STATUS_EMOJI")}
          EMBEDS=${EMBEDS//%ACTION%/$(esc "$ACTION")}
          EMBEDS=${EMBEDS//%REPO%/$(esc "$REPO")}
          EMBEDS=${EMBEDS//%PR_URL%/$(esc "$PR_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%COLOR%/$COLOR}
          EMBEDS=${EMBEDS//%ADDITIONS%/$(esc "$ADDITIONS")}
          EMBEDS=${EMBEDS//%DELETIONS%/$(esc "$DELETIONS")}
          EMBEDS=${EMBEDS//%CHANGED_FILES%/$(esc "$CHANGED_FILES")}
          EMBEDS=${EMBEDS//%PR_STATE%/$(esc "$PR_STATE")}
          EMBEDS=${EMBEDS//%PR_DRAFT%/$(esc "$PR_DRAFT")}
          EMBEDS=${EMBEDS//%MERGED%/$(esc "$MERGED")}
          EMBEDS=${EMBEDS//%ACTOR%/$(esc "$ACTOR")}
          EMBEDS=${EMBEDS//%REQUESTED_REVIEWERS%/$(esc "$REQUESTED_REVIEWERS")}
          EMBEDS=${EMBEDS//%LABELS%/$(esc "$LABELS")}
          EMBEDS=${EMBEDS//%RUN_URL%/$(esc "$GITHUB_RUN_URL")}
          EMBEDS=${EMBEDS//%NOW_ISO%/$(esc "$NOW_ISO")}

          post_json "{\"embeds\": $EMBEDS}"
