name: Notify Discord (push & PR detail)

on:
  workflow_dispatch:
  push:
  pull_request:
    types: [opened, closed, synchronize, reopened, ready_for_review]

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      ACTOR: ${{ github.actor }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Prepare payload for PUSH
        if: ${{ github.event_name == 'push' && secrets.DISCORD_WEBHOOK != '' }}
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          REF="${{ github.ref }}"
          REF_NAME="${REF##refs/heads/}"
          COMPARE_URL="${{ github.event.compare }}"
          PUSHER_NAME="${{ github.event.pusher.name }}"
          COMMITS_JSON=$(jq -r '
            .commits[:10] | map(
              "- `\(.id[0:7])` \(.message | split("\n")[0]) (by \(.author.username // .author.name // "unknown"))"
            ) | join("\n")
          ' <<< '${{ toJson(github.event) }}')

          [ -z "$COMMITS_JSON" ] && COMMITS_JSON="(no commits?)"

          esc () { python3 -c 'import json,sys; print(json.dumps(sys.argv[1])[1:-1])' "$1"; }

          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          STATUS_EMOJI="ðŸ“Œ"

          read -r -d '' EMBEDS <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% Push â€” %REPO% (%BRANCH%)",
              "url": "%COMPARE_URL%",
              "description": "%DESC%",
              "color": 3447003,
              "fields": [
                {"name": "Pusher", "value": "%PUSHER%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON

          DESC="Latest commits to \`$REF_NAME\`:\n$COMMITS_JSON"

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$STATUS_EMOJI}
          EMBEDS=${EMBEDS//%REPO%/$REPO}
          EMBEDS=${EMBEDS//%BRANCH%/$REF_NAME}
          EMBEDS=${EMBEDS//%COMPARE_URL%/$(echo "$COMPARE_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%PUSHER%/$(esc "$PUSHER_NAME")}
          EMBEDS=${EMBEDS//%RUN_URL%/$GITHUB_RUN_URL}
          EMBEDS=${EMBEDS//%NOW_ISO%/$NOW_ISO}

          curl -fS -H "Content-Type: application/json" -X POST \
            -d "{\"embeds\": $EMBEDS}" \
            "$DISCORD_WEBHOOK"

      - name: Prepare payload for PR
        if: ${{ github.event_name == 'pull_request' && secrets.DISCORD_WEBHOOK != '' }}
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          ACTION="${{ github.event.action }}"
          PR_JSON='${{ toJson(github.event.pull_request) }}'
          PR_NUMBER=$(jq -r '.number' <<< "$PR_JSON")
          PR_TITLE=$(jq -r '.title' <<< "$PR_JSON")
          PR_URL=$(jq -r '.html_url' <<< "$PR_JSON")
          PR_STATE=$(jq -r '.state' <<< "$PR_JSON")
          MERGED=$(jq -r '.merged' <<< "$PR_JSON")
          ADDITIONS=$(jq -r '.additions' <<< "$PR_JSON")
          DELETIONS=$(jq -r '.deletions' <<< "$PR_JSON")
          CHANGED_FILES=$(jq -r '.changed_files' <<< "$PR_JSON")
          REQUESTED_REVIEWERS=$(jq -r '[.requested_reviewers[].login] | join(", ") // ""' <<< "$PR_JSON")
          LABELS=$(jq -r '[.labels[].name] | join(", ") // ""' <<< "$PR_JSON")

          COLOR=3447003
          STATUS_EMOJI="ðŸŸ¦"
          case "$ACTION" in
            opened|reopened|ready_for_review) COLOR=5763719; STATUS_EMOJI="ðŸŸ©" ;;
            synchronize)                      COLOR=3447003; STATUS_EMOJI="ðŸŸ¦" ;;
            closed)
              if [ "$MERGED" = "true" ]; then
                COLOR=10181046; STATUS_EMOJI="ðŸŸª"
              else
                COLOR=15158332; STATUS_EMOJI="ðŸŸ¥"
              fi
              ;;
          esac

          BODY_FIRST=$(jq -r '.body // ""' <<< "$PR_JSON" | { IFS= read -r l; printf "%s" "$l"; })

          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          esc () { python3 -c 'import json,sys; print(json.dumps(sys.argv[1])[1:-1])' "$1"; }

          read -r -d '' EMBEDS <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% PR %ACTION% â€” %REPO%",
              "url": "%PR_URL%",
              "description": "%DESC%",
              "color": %COLOR%,
              "fields": [
                {"name": "Changes", "value": "+%ADDITIONS% / -%DELETIONS%  (%CHANGED_FILES% files)", "inline": true},
                {"name": "State", "value": "%PR_STATE%", "inline": true},
                {"name": "Merged", "value": "%MERGED%", "inline": true},
                {"name": "Actor", "value": "%ACTOR%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON

          DESC="[#${PR_NUMBER}] $(printf "%s" "$PR_TITLE")"
          if [ -n "$BODY_FIRST" ]; then
            DESC="$DESC\n> $(printf "%s" "$BODY_FIRST")"
          fi

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$STATUS_EMOJI}
          EMBEDS=${EMBEDS//%ACTION%/$(echo "$ACTION")}
          EMBEDS=${EMBEDS//%REPO%/$REPO}
          EMBEDS=${EMBEDS//%PR_URL%/$(echo "$PR_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%COLOR%/$COLOR}
          EMBEDS=${EMBEDS//%ADDITIONS%/$ADDITIONS}
          EMBEDS=${EMBEDS//%DELETIONS%/$DELETIONS}
          EMBEDS=${EMBEDS//%CHANGED_FILES%/$CHANGED_FILES}
          EMBEDS=${EMBEDS//%PR_STATE%/$PR_STATE}
          EMBEDS=${EMBEDS//%MERGED%/$MERGED}
          EMBEDS=${EMBEDS//%ACTOR%/$ACTOR}
          EMBEDS=${EMBEDS//%RUN_URL%/$GITHUB_RUN_URL}
          EMBEDS=${EMBEDS//%NOW_ISO%/$NOW_ISO}

          curl -fS -H "Content-Type: application/json" -X POST \
            -d "{\"embeds\": $EMBEDS}" \
            "$DISCORD_WEBHOOK"
