name: "Discord Notify - Push"

on:
  push:
    branches:
      - "main"

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      REPO: ${{ github.repository }}
      RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: "Post to Discord on push"
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail

          # Collect event basics
          REF="${{ github.ref }}"
          REF_NAME="${REF##refs/heads/}"
          COMPARE_URL="${{ github.event.compare }}"
          PUSHER_NAME="${{ github.event.pusher.name }}"
          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Build commits list as a single markdown string
          COMMITS_JSON=$(jq -r '
            .commits[:10] | map(
              "- `\(.id[0:7])` \(.message | split("\n")[0]) (by \(.author.username // .author.name // "unknown"))"
            ) | join("\n")
          ' <<< '${{ toJson(github.event) }}')
          [ -z "$COMMITS_JSON" ] && COMMITS_JSON="(no commits?)"

          # Compose payload via jq (no heredoc, no manual escaping)
          PAYLOAD=$(jq -n \
            --arg title "Push - ${REPO} (${REF_NAME})" \
            --arg url   "${COMPARE_URL}" \
            --arg desc  "Latest commits to \`${REF_NAME}\`:\n${COMMITS_JSON}" \
            --arg pusher "${PUSHER_NAME}" \
            --arg run   "${RUN_URL}" \
            --arg ts    "${NOW_ISO}" '
            {
              embeds: [
                {
                  title: $title,
                  url: $url,
                  description: $desc[:4096],
                  color: 3447003,
                  fields: [
                    {name: "Pusher", value: $pusher, inline: true},
                    {name: "Workflow", value: ("[Run Log](" + $run + ")"), inline: true}
                  ],
                  timestamp: $ts
                }
              ]
            }')

          # Post with one retry on 429
          post() {
            local data="$1"
            local code
            local headers
            headers="$(mktemp)"
            code=$(curl -sS -o /dev/null -w "%{http_code}" -D "$headers" \
              -H "Content-Type: application/json" -X POST -d "$data" \
              "$DISCORD_WEBHOOK" || true)
            if [ "$code" = "429" ]; then
              local ra
              ra=$(awk -F': ' 'tolower($1)=="retry-after"{print $2}' "$headers" | tr -d '\r')
              sleep "${ra:-2}"
              code=$(curl -sS -o /dev/null -w "%{http_code}" \
                -H "Content-Type: application/json" -X POST -d "$data" \
                "$DISCORD_WEBHOOK" || true)
            fi
            rm -f "$headers"
            echo "$code"
          }

          CODE=$(post "$PAYLOAD")
          if [ "${CODE:-000}" -ge 400 ]; then
            echo "::warning title=Discord webhook failed::HTTP ${CODE}"
          fi
            rm -f "$tmp_headers"
          }

          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          STATUS_EMOJI="[PUSH]"

          EMBEDS=$(cat <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% Push - %REPO% (%BRANCH%)",
              "url": "%COMPARE_URL%",
              "description": "%DESC%",
              "color": 3447003,
              "fields": [
                {"name": "Pusher", "value": "%PUSHER%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON
          )

          DESC="Latest commits to \`$REF_NAME\`:\n$COMMITS_JSON"
          DESC=$(trunc "$DESC" 4096)

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$(esc "$STATUS_EMOJI")}
          EMBEDS=${EMBEDS//%REPO%/$(esc "$REPO")}
          EMBEDS=${EMBEDS//%BRANCH%/$(esc "$REF_NAME")}
          EMBEDS=${EMBEDS//%COMPARE_URL%/$(esc "$COMPARE_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%PUSHER%/$(esc "$PUSHER_NAME")}
          EMBEDS=${EMBEDS//%RUN_URL%/$(esc "$GITHUB_RUN_URL")}
          EMBEDS=${EMBEDS//%NOW_ISO%/$(esc "$NOW_ISO")}

          post_json "{\"embeds\": $EMBEDS}"

name: "Discord Notify - Pull Request"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
      - ready_for_review

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      REPO: ${{ github.repository }}
      ACTOR: ${{ github.actor }}
      RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: "Post to Discord on pull_request"
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail

          ACTION="${{ github.event.action }}"
          PR_JSON='${{ toJson(github.event.pull_request) }}'
          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          PR_NUMBER=$(jq -r '.number' <<< "$PR_JSON")
          PR_TITLE=$(jq -r '.title'  <<< "$PR_JSON")
          PR_URL=$(jq -r '.html_url' <<< "$PR_JSON")
          PR_STATE=$(jq -r '.state'  <<< "$PR_JSON")
          PR_DRAFT=$(jq -r '.draft'  <<< "$PR_JSON")
          MERGED=$(jq -r '.merged'   <<< "$PR_JSON")
          ADDITIONS=$(jq -r '.additions' <<< "$PR_JSON")
          DELETIONS=$(jq -r '.deletions' <<< "$PR_JSON")
          CHANGED_FILES=$(jq -r '.changed_files' <<< "$PR_JSON")
          REQUESTED_REVIEWERS=$(jq -r '[.requested_reviewers[].login] | join(", ") // ""' <<< "$PR_JSON")
          LABELS=$(jq -r '[.labels[].name] | join(", ") // ""' <<< "$PR_JSON")

          # Determine color/status
          COLOR=3447003
          STATUS="PR"
          case "$ACTION" in
            opened|reopened|ready_for_review) COLOR=5763719;  STATUS="PR OPEN" ;;
            synchronize)                      COLOR=3447003; STATUS="PR UPDATE" ;;
            closed)
              if [ "$MERGED" = "true" ]; then
                COLOR=10181046; STATUS="PR MERGED"
              else
                COLOR=15158332; STATUS="PR CLOSED"
              fi
              ;;
          esac

          # Description (first line of body if exists)
          BODY_FIRST=$(jq -r '.body // ""' <<< "$PR_JSON" | { IFS= read -r l; printf "%s" "$l"; })
          DESC="[#${PR_NUMBER}] ${PR_TITLE}"
          if [ -n "$BODY_FIRST" ]; then
            DESC="${DESC}\n> ${BODY_FIRST}"
          fi

          # Build payload via jq
          PAYLOAD=$(jq -n \
            --arg title "${STATUS} ${ACTION} - ${REPO}" \
            --arg url   "${PR_URL}" \
            --arg desc  "${DESC}" \
            --arg add   "${ADDITIONS}" \
            --arg del   "${DELETIONS}" \
            --arg files "${CHANGED_FILES}" \
            --arg state "${PR_STATE}" \
            --arg draft "${PR_DRAFT}" \
            --arg merged "${MERGED}" \
            --arg actor "${ACTOR}" \
            --arg reviewers "${REQUESTED_REVIEWERS}" \
            --arg labels "${LABELS}" \
            --arg run   "${RUN_URL}" \
            --arg ts    "${NOW_ISO}" \
            --argjson color ${COLOR} '
            {
              embeds: [
                {
                  title: $title,
                  url: $url,
                  description: $desc[:4096],
                  color: $color,
                  fields: [
                    {name: "Changes", value: ("+" + $add + " / -" + $del + " (" + $files + " files)"), inline: true},
                    {name: "State", value: $state, inline: true},
                    {name: "Draft", value: $draft, inline: true},
                    {name: "Merged", value: $merged, inline: true},
                    {name: "Actor", value: $actor, inline: true},
                    {name: "Reviewers", value: ($reviewers // ""), inline: true},
                    {name: "Labels", value: ($labels // ""), inline: true},
                    {name: "Workflow", value: ("[Run Log](" + $run + ")"), inline: true}
                  ],
                  timestamp: $ts
                }
              ]
            }')

          # Post with one retry on 429
          post() {
            local data="$1"
            local code
            local headers
            headers="$(mktemp)"
            code=$(curl -sS -o /dev/null -w "%{http_code}" -D "$headers" \
              -H "Content-Type: application/json" -X POST -d "$data" \
              "$DISCORD_WEBHOOK" || true)
            if [ "$code" = "429" ]; then
              local ra
              ra=$(awk -F': ' 'tolower($1)=="retry-after"{print $2}' "$headers" | tr -d '\r')
              sleep "${ra:-2}"
              code=$(curl -sS -o /dev/null -w "%{http_code}" \
                -H "Content-Type: application/json" -X POST -d "$data" \
                "$DISCORD_WEBHOOK" || true)
            fi
            rm -f "$headers"
            echo "$code"
          }

          CODE=$(post "$PAYLOAD")
          if [ "${CODE:-000}" -ge 400 ]; then
            echo "::warning title=Discord webhook failed::HTTP ${CODE}"
          fi
              ;;
          esac

          BODY_FIRST=$(jq -r '.body // ""' <<< "$PR_JSON" | { IFS= read -r l; printf "%s" "$l"; })
          NOW_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          EMBEDS=$(cat <<'JSON'
          [
            {
              "title": "%STATUS_EMOJI% PR %ACTION% - %REPO%",
              "url": "%PR_URL%",
              "description": "%DESC%",
              "color": %COLOR%,
              "fields": [
                {"name": "Changes", "value": "+%ADDITIONS% / -%DELETIONS%  (%CHANGED_FILES% files)", "inline": true},
                {"name": "State", "value": "%PR_STATE%", "inline": true},
                {"name": "Draft", "value": "%PR_DRAFT%", "inline": true},
                {"name": "Merged", "value": "%MERGED%", "inline": true},
                {"name": "Actor", "value": "%ACTOR%", "inline": true},
                {"name": "Reviewers", "value": "%REQUESTED_REVIEWERS%", "inline": true},
                {"name": "Labels", "value": "%LABELS%", "inline": true},
                {"name": "Workflow", "value": "[Run Log](%RUN_URL%)", "inline": true}
              ],
              "timestamp": "%NOW_ISO%"
            }
          ]
          JSON
          )

          DESC="[#${PR_NUMBER}] $(printf "%s" "$PR_TITLE")"
          if [ -n "$BODY_FIRST" ]; then
            DESC="$DESC"$'\n'"'> '"$BODY_FIRST"
          fi
          DESC=$(trunc "$DESC" 4096)

          EMBEDS=${EMBEDS//%STATUS_EMOJI%/$(esc "$STATUS_EMOJI")}
          EMBEDS=${EMBEDS//%ACTION%/$(esc "$ACTION")}
          EMBEDS=${EMBEDS//%REPO%/$(esc "$REPO")}
          EMBEDS=${EMBEDS//%PR_URL%/$(esc "$PR_URL")}
          EMBEDS=${EMBEDS//%DESC%/$(esc "$DESC")}
          EMBEDS=${EMBEDS//%COLOR%/$COLOR}
          EMBEDS=${EMBEDS//%ADDITIONS%/$(esc "$ADDITIONS")}
          EMBEDS=${EMBEDS//%DELETIONS%/$(esc "$DELETIONS")}
          EMBEDS=${EMBEDS//%CHANGED_FILES%/$(esc "$CHANGED_FILES")}
          EMBEDS=${EMBEDS//%PR_STATE%/$(esc "$PR_STATE")}
          EMBEDS=${EMBEDS//%PR_DRAFT%/$(esc "$PR_DRAFT")}
          EMBEDS=${EMBEDS//%MERGED%/$(esc "$MERGED")}
          EMBEDS=${EMBEDS//%ACTOR%/$(esc "$ACTOR")}
          EMBEDS=${EMBEDS//%REQUESTED_REVIEWERS%/$(esc "$REQUESTED_REVIEWERS")}
          EMBEDS=${EMBEDS//%LABELS%/$(esc "$LABELS")}
          EMBEDS=${EMBEDS//%RUN_URL%/$(esc "$GITHUB_RUN_URL")}
          EMBEDS=${EMBEDS//%NOW_ISO%/$(esc "$NOW_ISO")}

          post_json "{\"embeds\": $EMBEDS}"
